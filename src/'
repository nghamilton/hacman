{-# LANGUAGE EmptyDataDecls #-}

module Main where
data Item = W | D | S | P | E deriving (Show)

type Row = [Item]
type Board = [Row]

import Data.Char

board = [ [W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W],
  [W,D,D,D,D,D,D,D,D,D,D,D,D,W,W,D,D,D,D,D,D,D,D,D,D,D,D,W],
  [W,D,W,W,W,W,D,W,W,W,W,W,D,W,W,D,W,W,W,W,W,D,W,W,W,W,D,W],
  [W,S,W,W,W,W,D,W,W,W,W,W,D,W,W,D,W,W,W,W,W,D,W,W,W,W,S,W],
  [W,D,W,W,W,W,D,W,W,W,W,W,D,W,W,D,W,W,W,W,W,D,W,W,W,W,D,W],
  [W,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,W],
  [W,D,W,W,W,W,D,W,W,D,W,W,W,W,W,W,W,W,D,W,W,D,W,W,W,W,D,W],
  [W,D,D,D,D,D,D,W,W,D,D,D,D,W,W,D,D,D,D,W,W,D,D,D,D,D,D,W],
  [W,W,W,W,W,W,D,W,W,W,W,W,S,W,W,S,W,W,W,W,W,D,W,W,W,W,W,W],
  [W,W,W,W,W,W,D,W,W,W,W,W,S,W,W,S,W,W,W,W,W,D,W,W,W,W,W,W],
  [W,W,W,W,W,W,D,W,W,S,S,S,S,S,S,S,S,S,S,W,W,D,W,W,W,W,W,W],
  [W,W,W,W,W,W,D,W,W,S,W,W,W,W,W,W,W,W,S,W,W,D,W,W,W,W,W,W],
  [W,W,W,W,W,W,D,W,W,S,W,W,W,W,W,W,W,W,S,W,W,D,W,W,W,W,W,W],
  [S,S,S,S,S,S,D,S,S,S,W,W,W,W,W,W,W,W,S,S,S,D,S,S,S,S,S,S],
  [W,W,W,W,W,W,D,W,W,S,W,W,W,W,W,W,W,W,S,W,W,D,W,W,W,W,W,W],
  [W,W,W,W,W,W,D,W,W,S,W,W,W,W,W,W,W,W,S,W,W,D,W,W,W,W,W,W],
  [W,W,W,W,W,W,D,W,W,S,S,S,S,S,S,S,S,S,S,W,W,D,W,W,W,W,W,W],
  [W,W,W,W,W,W,D,W,W,W,W,W,S,W,W,S,W,W,W,W,W,D,W,W,W,W,W,W],
  [W,W,W,W,W,W,D,W,W,W,W,W,S,W,W,S,W,W,W,W,W,D,W,W,W,W,W,W],
  [W,D,D,D,D,D,D,W,W,D,D,D,D,W,W,D,D,D,D,W,W,D,D,D,D,D,D,W],
  [W,D,W,W,W,W,D,W,W,D,W,W,W,W,W,W,W,W,D,W,W,D,W,W,W,W,D,W],
  [W,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,D,W],
  [W,D,W,W,W,W,D,W,W,W,W,W,D,W,W,D,W,W,W,W,W,D,W,W,W,W,D,W],
  [W,S,W,W,W,W,D,W,W,W,W,W,D,W,W,D,W,W,W,W,W,D,W,W,W,W,S,W],
  [W,D,W,W,W,W,D,W,W,W,W,W,D,W,W,D,W,W,W,W,W,D,W,W,W,W,D,W],
  [W,D,D,D,D,D,D,D,D,D,D,D,D,W,W,D,D,D,D,D,D,D,D,D,D,D,D,W],
  [W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W] ] :: Board

main :: IO ()
main = do
  putStrLn $ show board 

showRow :: Row -> String
showRow r = map conv r ++ ['\n'] where
  conv W = '*' -- 219 
  conv D = '.' -- 167
  conv S = ' '
  conv P = 'c' -- 184

